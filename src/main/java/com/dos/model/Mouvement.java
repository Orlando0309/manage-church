package com.dos.model;

import com.dos.contrat.IEntity;
import jakarta.persistence.*;
import lombok.Data;
import lombok.Setter;

import java.math.BigDecimal;
import java.time.LocalDate;
import lombok.AccessLevel;
import lombok.AllArgsConstructor;
import lombok.NoArgsConstructor;

@Entity
@Table(name = "mouvement")
@Data

@AllArgsConstructor
@NoArgsConstructor
public class Mouvement implements IEntity<Long>{
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @Setter
    @Column(name = "codemouvement")
    private Integer codemouvement;

    @Setter(AccessLevel.NONE)
    @Column(name = "montant", nullable = false)
    private BigDecimal montant;

    @Setter(AccessLevel.NONE)
    @Column(name = "datemouvement", nullable = false, columnDefinition = "DATE DEFAULT CURRENT_DATE")
    private LocalDate datemouvement;

    // Getters and Setters for other fields will be generated by Lombok
    public void setMontant(BigDecimal montant) {
        if (montant == null || montant.compareTo(BigDecimal.ZERO) <= 0) {
            throw new IllegalArgumentException("Montant must be a positive number greater than 0");
        }
        this.montant = montant;
    }

    public void setDatemouvement(LocalDate datemouvement) {
        if(datemouvement == null || datemouvement.isAfter(LocalDate.now())){
            throw new IllegalArgumentException("Date mouvement must be today or a past date.");
        }
        this.datemouvement = datemouvement;
    }
    
    
}
